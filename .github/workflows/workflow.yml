# name: Test github actions

# on: push

# jobs:
#   run-tests:
#     runs-on: ubuntu-latest
#     container:
#       image: node:latest
#       env:
#         NODE_ENV: development
#       ports:
#         - 80
#       volumes:
#         - ${{ github.workspace}}:/container
#       options: --cpus 1

#     steps:
#       - name: checkout the repo
#         uses: actions/checkout@v2

#       - name: Check for dockerenv file
#         run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)
      
#       - name: Open the backend and Install dependencies
#         run: npm i

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Get commit hash
#         id: get-commit-hash
#         run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
#       - name: Get timestamp
#         id: get-timestamp
#         run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"


#       - name: Build, tag, and push the image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
#           IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


        
#       # - name: Build the image
#       #   run: cd container & docker build -t my-node-app .


name: Test GitHub Actions

on:
  push:
    branches:
        - main

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Check for dockerenv file
        run: |
          if [ -f /.dockerenv ]; then
            echo "Found dockerenv"
          else
            echo "No dockerenv"
          fi

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: tsc --project tsconfig.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get commit hash
        id: get-commit-hash
        run: echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Get timestamp
        id: get-timestamp
        run: echo "timestamp=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV

      - name: Build, tag, and push the image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: ${{ env.commit_hash }}-${{ env.timestamp }}
        run: |
          docker build -t my-ecr-repo:latest .
          docker tag my-ecr-repo:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPO_NAME }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPO_NAME }}

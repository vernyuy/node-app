name: Deploy Code with GitHub Actions

on:
  push:
    branches:
        - main

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Check for dockerenv file
        run: |
          if [ -f /.dockerenv ]; then
            echo "Found dockerenv"
          else
            echo "No dockerenv"
          fi

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: tsc --project tsconfig.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get commit hash
        id: get-commit-hash
        run: echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Get timestamp
        id: get-timestamp
        run: echo "timestamp=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV

      - name: Build, tag, and push the image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: ${{ env.commit_hash }}-${{ env.timestamp }}
        run: |
          docker build -t my-ecr-repo .
          docker tag my-ecr-repo:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPO_NAME }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPO_NAME }}:latest
      # - name: Update cluster
      - name: Download task definition 
        run: |
          aws ecs describe-task-definition - task-definition etap-development - query taskDefinition > task-definition.json
      - name: Fill in new image ID in task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json 
          container-name: ${{ secrets.ECS_SERVICE_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1 
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
        # run: |
        #   ecs_service_name=${{ secrets.ECS_SERVICE_NAME }}
        #   ecs_cluster_name=${{ secrets.ECS_CLUSTER_NAME }}

        #   task_definition_arn=$(aws ecs describe-services \
        #     --cluster $ecs_cluster_name \
        #     --services $ecs_service_name \
        #     --query 'services[0].taskDefinition' \
        #     --output text)

        #   new_task_definition=$(aws ecs describe-task-definition \
        #     --task-definition $task_definition_arn \
        #     --query 'taskDefinition')

        #   new_task_definition=$(echo $new_task_definition | jq --arg IMAGE "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPO_NAME }}:latest" '.containerDefinitions[0].image = $IMAGE')

        #   new_task_definition=$(echo $new_task_definition | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')

        #   registered_task_definition=$(echo $new_task_definition | aws ecs register-task-definition --cli-input-json /dev/stdin)

        #   new_task_definition_arn=$(echo $registered_task_definition | jq -r '.taskDefinition.taskDefinitionArn')

        #   aws ecs update-service --cluster $ecs_cluster_name --service $ecs_service_name --task-definition $new_task_definition_arn
